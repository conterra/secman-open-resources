{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/conterra/secman-open-resources/1.0.0/schema/server-config.schema.json",
    "title": "Server-config Schema",
    "description": "Describe the schema of server-config.json files",
    "type": "object",
    "required": ["server"],
    "additionalProperties": false,
    "properties": {
        "$schema": {
            "type": "string",
            "description": "The URI to the json schema.",
            "doNotSuggest": true
        },
        "server": {
            "type": "object",
            "description": "The configuration for the target server.",
            "required": ["host", "services"],
            "additionalProperties": false,
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The host name of the target server.",
                    "pattern": "(^http[s]?://[^@/]+$)|(\\$\\{.+\\})",
                    "patternErrorMessage": "The host must start with http:// or https:// and must not contain any path, query or user info parameters. The use of environment variables is allowed. Example: `${test.host}`"
                },
                "serverAuth": {
                    "type": "object",
                    "description": "The authentication information for the target server.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/serverAuth-enum"
                        },
                        {
                            "$ref": "#/definitions/serverAuth-condition"
                        }
                    ]
                },
                "services": {
                    "type": "array",
                    "description": "An array of OGC services that should be protected.",
                    "minItems": 1,
                    "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": ["path", "type"],
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "The path of the service on the target server.",
                                "pattern": "^/[\\w\\-/\\.]+$"
                            },
                            "type": {
                                "type": "string",
                                "description": "The type of the service.",
                                "enum": ["FORWARD", "WMS", "WFS"],
                                "enumDescriptions": [
                                    "no OGC service, just a forward proxy",
                                    "Web Map Service",
                                    "Web Feature Service"
                                ]
                            },
                            "policy-ref": {
                                "type": "string",
                                "description": "The reference to the policy that should be used for this service.",
                                "pattern": "^[\\p{L}\\p{N}\\-.#@_]+$",
                                "patternErrorMessage": "The policy-ref must only contain alphanumeric chars and '_-.#@'"
                            }
                        },
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "type": {
                                            "not": {
                                                "const": "FORWARD"
                                            }
                                        }
                                    }
                                },
                                "then": {
                                    "required": ["policy-ref"]
                                }
                            }
                        ]
                    }
                }
            }
        }
    },
    "definitions": {
        "serverAuth-enum": {
            "properties": {
                "type": {
                    "type": "string",
                    "enum": ["none", "basic"],
                    "description": "Declares the type of the authentication.",
                    "markdownEnumDescriptions": ["No Authentication", "HTTP Basic Authentication"]
                }
            }
        },
        "serverAuth-condition": {
            "discriminator": {
                "propertyName": "type"
            },
            "oneOf": [
                {
                    "$ref": "#/definitions/serverAuth-type-none"
                },
                {
                    "$ref": "#/definitions/serverAuth-type-basic"
                }
            ],
            "errorMessage": {
                "discriminator": "\"type\" must be one of \"basic\" or \"none\""
            }
        },
        "serverAuth-type-none": {
            "type": "object",
            "required": ["type"],
            "additionalProperties": false,
            "properties": {
                "type": {
                    "type": "string",
                    "const": "none"
                }
            }
        },
        "serverAuth-type-basic": {
            "type": "object",
            "required": ["type", "username", "password"],
            "additionalProperties": false,
            "properties": {
                "type": {
                    "type": "string",
                    "const": "basic"
                },
                "username": {
                    "type": "string",
                    "description": "Username used to authenticate against the target server in plain text.",
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate against the target server in plain text.",
                    "minLength": 1
                }
            }
        }
    }
}
